import network
import time
import ubinascii
import machine
import neopixel
import ujson
from umqtt.simple import MQTTClient
import urequests

# MQTT Settings
MQTT_BROKER = "broker.emqx.io"
MQTT_PORT = 1883
CLIENT_ID = ubinascii.hexlify(machine.unique_id()).decode()
DRAW_TOPIC = "steffiPeTaffy/draw"
CONNECT_TOPIC = "steffiPeTaffy/draw/connect"
UPDATE_TOPIC = "steffiPeTaffy/draw/update"

# Neopixel Setup (M5 Atom Matrix has 5x5 LEDs)
PIXEL_COUNT = 25  # 5x5 matrix
PIXEL_PIN = 27  # GPIO pin for M5 Atom Matrix LED
np = neopixel.NeoPixel(machine.Pin(PIXEL_PIN), PIXEL_COUNT)
pixel_data = [[(0, 0, 0) for _ in range(5)] for _ in range(5)]  # 5x5 Grid

# MQTT Client
mqtt_client = MQTTClient(CLIENT_ID, MQTT_BROKER, MQTT_PORT)

def draw_pixel(x, y, r, g, b):
    """Draw a pixel on the 5x5 LED matrix."""
    if 0 <= x < 5 and 0 <= y < 5:
        index = x + y * 5  # Convert (x, y) to 1D index
        np[index] = (r, g, b)
        np.write()  # Update display
        pixel_data[x][y] = (r, g, b)

def sync_display():
    """Sync stored pixel data to MQTT broker."""
    for x in range(5):
        for y in range(5):
            r, g, b = pixel_data[x][y]
            if (r, g, b) != (0, 0, 0):  # Only send non-black pixels
                msg = ujson.dumps([x, y, r, g, b])
                mqtt_client.publish(DRAW_TOPIC, msg)
    print("Display synced.")

def on_message(topic, msg):
    """Handle incoming MQTT messages."""
    topic = topic.decode()
    print("Message received on topic: {}".format(topic))
    print("Raw message: {}".format(msg))  # Print raw message for debugging

    try:
        msg_decoded = msg.decode()  # Ensure it's decoded properly
        print("Decoded message: {}".format(msg_decoded))  # Debug decoded message
        
        data = ujson.loads(msg_decoded)  # Attempt to parse JSON
        
        if topic == DRAW_TOPIC:
            if len(data) != 5:
                print("Invalid message format. Expected [x, y, r, g, b].")
                return
            x, y, r, g, b = data
            draw_pixel(x % 5, y % 5, r, g, b)
        
        elif topic == CONNECT_TOPIC:
            sync_display()

        else:
            print("Unknown topic: {}".format(topic))

    except Exception as e:
        print("Error processing message: {}".format(e))


def connect_mqtt():
    """Connect to MQTT broker and subscribe to topics."""
    mqtt_client.set_callback(on_message)
    mqtt_client.connect()
    mqtt_client.subscribe(DRAW_TOPIC)
    mqtt_client.subscribe(CONNECT_TOPIC)
    mqtt_client.subscribe(UPDATE_TOPIC)
    print("Connected to MQTT and subscribed to topics.")

def main():
    """Main loop handling MQTT messages."""
    connect_mqtt()
    while True:
        try:
            mqtt_client.check_msg()  # Process incoming messages
            time.sleep(0.1)
        except Exception as e:
            print("MQTT error: {}. Reconnecting...".format(e))
            time.sleep(5)
            connect_mqtt()

# Run the main loop
main()